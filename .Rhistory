setwd("D:/Statistics/Resampling Methods")
library(ISLR)
install.packages("ISLR")
install.packages("ISLR")
library(ISLR)
set.seed(1)
train.sample = sample(392, 192)
lm.fit = lm(mpg ~ horsepower, data = Auto, subset = train)
lm.fit = lm(mpg ~ horsepower, data = Auto, subset = train.sample)
predict <- lm.fit %>% predict(Auto[-sample,])
library(dplyr)
predict <- lm.fit %>% predict(Auto[-sample,])
View(Auto[sample])
View(Auto[sample,])
?creatDataPartition
?createDataPartition
??createDataPartition
library(caret)
sample <= createDataPartition(p = 0.8, list = FALSE)
sample <- createDataPartition(p = 0.8, list = FALSE)
sample <- Auto$mpg %>%createDataPartition(p = 0.8, list = FALSE)
sample <- Auto$mpg %>%createDataPartition(p = 0.5, list = FALSE)
lm.fit < lm(mpg~horsepower, data = Auto[train,])
lm.fit < lm(mpg~horsepower, data = Auto[sample,])
train <- Auto[sample, ]
test <- Auto[-sample, ]
lm.fit < lm(mpg~horsepower, data = train)
lm.fit <- lm(mpg~horsepower, data = train)
predict <0- lm.fit %>% predict(test)
predict <- lm.fit %>% predict(test)
mean(Auto$mpg, predict)
mean(test$mpg, predict)
mean(test$mpg == predict)
mean(predict == test$mpg)
?predict
library(ISLR)
set.seed(1)
train = sample(392, 196)
lm.fit <- lm(mpg~horsepower, data = Auto, sample = train)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
View(Auto[train,])
length(Auto[tain,])
length(Auto[train,])
dim(Auto[train,])
predict <- lm.fit %>% predict(Auto[-train,])
mean(predict == Auto[-train,]$mpg)
mean((mpg - predict(lm.fit, Auto))[-train]^2)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
attach(Auto)
mean((mpg -predict (lm.fit ,Auto))[-train ]^2)
nrow(Auto)
set.seed(1)
n = nrow(Auto)
train = sample(1:n, size = n*0.50, replace = FALSE )
train_set <- Auto[train, ]
validation_set <- Auto[-train, ]
lm.fit <- lm(mpg~horsepower, data = train_set)
predict <- lm.fit %>% predict(validation_set)
mean(predict == validation_set$mpg)
predict <- predict(lm.fit, validation_set)
RMSE(predict, validation_set$mpg)
mean(predict == validation_set$mpg)
MSE <- mean((validation_set$mpg - predict)^2)
MSE
# Polynomial
lm.fit1 <- lm(mpg~poly(horsepower, 2), data = train_set )
predict1 <- predict(lm.fit1, validation_set)
RMSE(predict1, validation_set$mpg)
library(boot)
library(boot)
glm.fit <- glm(mpg~horsepower, data = Auto)
cv.err <- cv.glm(Auto, glm.fit)
cv.err
cv.err$delta
cv.err = rep(0, 5)
for(i in 1:5){
glm.fit <- glm(mpg~poly(horsepower, i), data = Auto)
cv.err[i] <- cv.glm(Auto, glm.fit)$delta[1]
}
cv.err
set.seed(17)
cv.err.10 <- rep(0, 10)
for(i in 1:10){
glm.fit <- glm(mpg~poly(horsepower, i), data = Auto)
cv.err[i] <- cv.glm(Auto, glm.fit, K= 10)$delta[1]
}
cv.err.10
set.seed(17)
cv.err.10 <- rep(0, 10)
set.seed(17)
cv.err.10 <- rep(0, 10)
for(i in 1:10){
glm.fit <- glm(mpg~poly(horsepower, i), data = Auto)
cv.err.10[i] <- cv.glm(Auto, glm.fit, K= 10)$delta[1]
}
cv.err.10
View(Portfolio)
alpha.fn <- function(data, index){
X = data$X[index]
Y = data$Y[index]
return( (var(Y)-cov(X, Y))/( var(X)+var(Y)-2*cov(X, Y)) )
}
boot(Portfolio, alpha.fn, R = 1000)
boot.fn <- function(data, index)
return(coef(lm(mpg~horsepower, data = data, subset = index))
)
boot.fn(Auto, 1:392)
boot.fn <- function(data, index)
return(coef(lm(mpg~horsepower, data = data[index,]))
)
boot.fn(Auto, 1:392)
boot.fn(Auto, sample(392, 392, replace = T))
set.seed(1)
boot.fn(Auto, sample(392, 392, replace = T))
boot(Auto, boot.fn, 1000)
boot(Auto, boot.fn(sample(392, 392, replace = TRUE)), 1000)
train.control <- trainControl(method = "boot", number = 100)
model <- train(mpg~horsepower, data = Auto, method = "lm", trControl - train.control)
model <- train(mpg~horsepower, data = Auto, method = "lm", trControl = train.control)
print(model)
